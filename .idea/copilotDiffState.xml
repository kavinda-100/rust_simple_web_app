<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AxumWithRust.http">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AxumWithRust.http" />
              <option name="originalContent" value="### AxumWithRust.http&#10;### This file contains HTTP requests for testing an Axum server built with Rust.&#10;&#10;### Variables&#10;@baseUrl = http://localhost:5000&#10;@contentType = application/json&#10;&#10;&#10;### GET request to root endpoint&#10;GET {{baseUrl}}/&#10;&#10;&#10;### GET request to fetch Vehicle data&#10;GET {{baseUrl}}/vehicle&#10;&#10;### POST request with JSON body&#10;POST {{baseUrl}}/vehicle&#10;Content-Type: {{contentType}}&#10;&#10;{&#10;  &quot;manufacturer&quot;: &quot;Toyota&quot;,&#10;  &quot;name&quot;: &quot;Camry&quot;,&#10;  &quot;model&quot;: &quot;Camry&quot;,&#10;  &quot;year&quot;: 2023,&#10;}&#10;&#10;#### GET request with query parameters&#10;#GET {{baseUrl}}/users?page=1&amp;limit=10&#10;#&#10;#&#10;#### GET request with headers&#10;#GET {{baseUrl}}/protected&#10;#Authorization: Bearer your-token-here&#10;#Accept: application/json&#10;#&#10;#&#10;#### POST request with JSON body&#10;#POST {{baseUrl}}/users&#10;#Content-Type: {{contentType}}&#10;#&#10;#{&#10;#  &quot;name&quot;: &quot;John Doe&quot;,&#10;#  &quot;email&quot;: &quot;john@example.com&quot;,&#10;#  &quot;age&quot;: 30&#10;#}&#10;#&#10;#### POST request with form data&#10;#POST {{baseUrl}}/login&#10;#Content-Type: application/x-www-form-urlencoded&#10;#&#10;#username=testuser&amp;password=testpass&#10;#&#10;#&#10;#### PUT request to update resource&#10;#PUT {{baseUrl}}/users/1&#10;#Content-Type: {{contentType}}&#10;#Authorization: Bearer your-token-here&#10;#&#10;#{&#10;#  &quot;name&quot;: &quot;John Smith&quot;,&#10;#  &quot;email&quot;: &quot;johnsmith@example.com&quot;,&#10;#  &quot;age&quot;: 31&#10;#}&#10;#&#10;#### PATCH request for partial update&#10;#PATCH {{baseUrl}}/users/1&#10;#Content-Type: {{contentType}}&#10;#&#10;#{&#10;#  &quot;age&quot;: 32&#10;#}&#10;#&#10;#### DELETE request&#10;#DELETE {{baseUrl}}/users/1&#10;#Authorization: Bearer your-token-here&#10;#&#10;#### Environment-specific requests&#10;## @name healthCheck&#10;#GET {{baseUrl}}/health&#10;#&#10;#### Request with response handling (some clients support this)&#10;## @name createUser&#10;#POST {{baseUrl}}/users&#10;#Content-Type: {{contentType}}&#10;#&#10;#{&#10;#  &quot;name&quot;: &quot;Jane Doe&quot;,&#10;#  &quot;email&quot;: &quot;jane@example.com&quot;&#10;#}&#10;&#10;### Using response from previous request (if supported by your client)&#10;# GET {{baseUrl}}/users/{{createUser.response.body.id}}&#10;&#10;###" />
              <option name="updatedContent" value="### AxumWithRust.http&#10;### This file contains HTTP requests for testing an Axum server built with Rust.&#10;&#10;### Variables&#10;@baseUrl = http://localhost:5000&#10;@contentType = application/json&#10;&#10;&#10;### GET request to root endpoint&#10;GET {{baseUrl}}/&#10;&#10;&#10;### GET request to fetch Vehicle data&#10;GET {{baseUrl}}/vehicle&#10;&#10;### POST request with JSON body&#10;POST {{baseUrl}}/vehicle&#10;Content-Type: {{contentType}}&#10;&#10;{&#10;  &quot;manufacturer&quot;: &quot;Toyota&quot;,&#10;  &quot;name&quot;: &quot;Camry&quot;,&#10;  &quot;model&quot;: &quot;Camry&quot;,&#10;  &quot;year&quot;: 2023&#10;}&#10;&#10;#### GET request with query parameters&#10;#GET {{baseUrl}}/users?page=1&amp;limit=10&#10;#&#10;#&#10;#### GET request with headers&#10;#GET {{baseUrl}}/protected&#10;#Authorization: Bearer your-token-here&#10;#Accept: application/json&#10;#&#10;#&#10;#### POST request with JSON body&#10;#POST {{baseUrl}}/users&#10;#Content-Type: {{contentType}}&#10;#&#10;#{&#10;#  &quot;name&quot;: &quot;John Doe&quot;,&#10;#  &quot;email&quot;: &quot;john@example.com&quot;,&#10;#  &quot;age&quot;: 30&#10;#}&#10;#&#10;#### POST request with form data&#10;#POST {{baseUrl}}/login&#10;#Content-Type: application/x-www-form-urlencoded&#10;#&#10;#username=testuser&amp;password=testpass&#10;#&#10;#&#10;#### PUT request to update resource&#10;#PUT {{baseUrl}}/users/1&#10;#Content-Type: {{contentType}}&#10;#Authorization: Bearer your-token-here&#10;#&#10;#{&#10;#  &quot;name&quot;: &quot;John Smith&quot;,&#10;#  &quot;email&quot;: &quot;johnsmith@example.com&quot;,&#10;#  &quot;age&quot;: 31&#10;#}&#10;#&#10;#### PATCH request for partial update&#10;#PATCH {{baseUrl}}/users/1&#10;#Content-Type: {{contentType}}&#10;#&#10;#{&#10;#  &quot;age&quot;: 32&#10;#}&#10;#&#10;#### DELETE request&#10;#DELETE {{baseUrl}}/users/1&#10;#Authorization: Bearer your-token-here&#10;#&#10;#### Environment-specific requests&#10;## @name healthCheck&#10;#GET {{baseUrl}}/health&#10;#&#10;#### Request with response handling (some clients support this)&#10;## @name createUser&#10;#POST {{baseUrl}}/users&#10;#Content-Type: {{contentType}}&#10;#&#10;#{&#10;#  &quot;name&quot;: &quot;Jane Doe&quot;,&#10;#  &quot;email&quot;: &quot;jane@example.com&quot;&#10;#}&#10;&#10;### Using response from previous request (if supported by your client)&#10;# GET {{baseUrl}}/users/{{createUser.response.body.id}}&#10;&#10;###" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="#  Rust Simple Web App - Vehicle REST API&#10;&#10;![Rust](https://img.shields.io/badge/rust-%23000000.svg?style=for-the-badge&amp;logo=rust&amp;logoColor=white)&#10;![Axum](https://img.shields.io/badge/axum-ff6600?style=for-the-badge&amp;logo=rust&amp;logoColor=white)&#10;![REST API](https://img.shields.io/badge/REST-API-blue?style=for-the-badge)&#10;![Learning](https://img.shields.io/badge/Purpose-Learning-green?style=for-the-badge)&#10;&#10;A simple REST API built with **Rust** and the **Axum** web framework for learning purposes. This project demonstrates basic CRUD operations for vehicle management without database integration.&#10;&#10;##  Project Goals&#10;&#10;-  Learn Rust programming language fundamentals&#10;-  Understand REST API development with Axum&#10;-  Practice CRUD operations (Create, Read, Update, Delete)&#10;-  Build a foundation for future Rust web development&#10;&#10;## ✨ Features&#10;&#10;- ✅ **GET** - Retrieve all vehicles or specific vehicle by ID&#10;- ✅ **POST** - Create new vehicles with auto-generated UUIDs&#10;- ✅ **PUT** - Update existing vehicles&#10;- ✅ **DELETE** - Remove vehicles by ID&#10;- ✅ **Query Parameters** - Search vehicles with custom filters&#10;- ✅ **JSON Response** - All endpoints return JSON data&#10;- ✅ **HTTP Status Codes** - Proper status codes (200, 201, 204, etc.)&#10;&#10;## ️ Tech Stack&#10;&#10;- **Language**: Rust &#10;- **Web Framework**: Axum&#10;- **Serialization**: Serde (JSON)&#10;- **Async Runtime**: Tokio&#10;- **UUID Generation**: uuid crate&#10;- **HTTP Client Testing**: REST Client files&#10;&#10;##  API Endpoints&#10;&#10;| Method | Endpoint | Description | Status Code |&#10;|--------|----------|-------------|-------------|&#10;| `GET` | `/` | Welcome message | 200 |&#10;| `GET` | `/vehicle/all` | Get all vehicles | 200 |&#10;| `GET` | `/vehicle/{id}` | Get vehicle by ID | 200 |&#10;| `GET` | `/vehicle/query?params` | Search vehicles | 200 |&#10;| `POST` | `/vehicle` | Create new vehicle | 201 |&#10;| `PUT` | `/vehicle/{id}` | Update vehicle | 200 |&#10;| `DELETE` | `/vehicle/{id}` | Delete vehicle | 204 |&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;&#10;- [Rust](https://rustup.rs/) (latest stable version)&#10;- [Cargo](https://doc.rust-lang.org/cargo/) (comes with Rust)&#10;&#10;### Installation&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone &lt;your-repo-url&gt;&#10;   cd rust_simple_web_app&#10;   ```&#10;&#10;2. **Install dependencies**&#10;   ```bash&#10;   cargo build&#10;   ```&#10;&#10;3. **Run the server**&#10;   ```bash&#10;   cargo run&#10;   ```&#10;&#10;4. **Server will start on**&#10;   ```&#10;    http://localhost:5000&#10;   ```&#10;&#10;##  Usage Examples&#10;&#10;### Using the HTTP File&#10;&#10;The project includes a `AxumWithRust.http` file for easy API testing. Open it in VS Code with the REST Client extension or any compatible IDE.&#10;&#10;### Sample Requests&#10;&#10;#### Create a Vehicle&#10;```http&#10;POST http://localhost:5000/vehicle&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;manufacturer&quot;: &quot;Toyota&quot;,&#10;  &quot;name&quot;: &quot;Camry&quot;,&#10;  &quot;model&quot;: &quot;Camry&quot;,&#10;  &quot;year&quot;: 2023&#10;}&#10;```&#10;&#10;#### Get All Vehicles&#10;```http&#10;GET http://localhost:5000/vehicle/all&#10;```&#10;&#10;#### Search Vehicles&#10;```http&#10;GET http://localhost:5000/vehicle/query?manufacturer=Toyota&amp;year=2023&#10;```&#10;&#10;#### Update Vehicle&#10;```http&#10;PUT http://localhost:5000/vehicle/1&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;manufacturer&quot;: &quot;Honda&quot;,&#10;  &quot;name&quot;: &quot;Civic&quot;,&#10;  &quot;model&quot;: &quot;Civic&quot;,&#10;  &quot;year&quot;: 2024&#10;}&#10;```&#10;&#10;#### Delete Vehicle&#10;```http&#10;DELETE http://localhost:5000/vehicle/1&#10;```&#10;&#10;##  Project Structure&#10;&#10;```&#10;rust_simple_web_app/&#10;├──  Cargo.toml          # Project dependencies&#10;├──  README.md           # Project documentation&#10;├──  AxumWithRust.http   # HTTP test requests&#10;├──  src/&#10;│   ├──  main.rs         # Application entry point &amp; routes&#10;│   └──  vehicle.rs      # Vehicle handlers &amp; data structures&#10;└──  target/             # Compiled artifacts&#10;```&#10;&#10;##  Dependencies&#10;&#10;```toml&#10;[dependencies]&#10;axum = &quot;0.7&quot;&#10;serde = { version = &quot;1.0&quot;, features = [&quot;derive&quot;] }&#10;serde_json = &quot;1.0&quot;&#10;tokio = { version = &quot;1.0&quot;, features = [&quot;full&quot;] }&#10;uuid = { version = &quot;1.0&quot;, features = [&quot;v4&quot;] }&#10;```&#10;&#10;##  Learning Objectives Covered&#10;&#10;- ✅ **Rust Syntax**: Structs, enums, pattern matching, ownership&#10;- ✅ **Async Programming**: Understanding `async/await` with Tokio&#10;- ✅ **Web Development**: HTTP methods, status codes, JSON handling&#10;- ✅ **Error Handling**: Result types and proper error responses&#10;- ✅ **Code Organization**: Module system and separation of concerns&#10;- ✅ **Testing**: HTTP file-based API testing&#10;&#10;##  Next Steps for Learning&#10;&#10;-  Add database integration (PostgreSQL, SQLite)&#10;-  Implement authentication &amp; authorization&#10;- ✅ Add input validation and error handling&#10;-  Write unit and integration tests&#10;-  Containerize with Docker&#10;-  Add API documentation with OpenAPI/Swagger&#10;&#10;##  Contributing&#10;&#10;This is a learning project, but feel free to:&#10;-  Report bugs or issues&#10;-  Suggest improvements&#10;-  Share learning resources&#10;-  Submit pull requests&#10;&#10;##  License&#10;&#10;This project is open source and available under the [MIT License](LICENSE).&#10;&#10;##  Acknowledgments&#10;&#10;-  [Rust Community](https://www.rust-lang.org/)&#10;- ⚡ [Axum Framework](https://github.com/tokio-rs/axum)&#10;-  [Rust Book](https://doc.rust-lang.org/book/)&#10;-  [Tokio Async Runtime](https://tokio.rs/)&#10;&#10;---&#10;&#10;**Happy Learning with Rust! ✨**&#10;&#10;&gt; *&quot;The best way to learn is by building. Start simple, iterate, and grow.&quot;*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main.rs" />
              <option name="originalContent" value="use axum::{Router};&#10;use axum::routing::{delete, post, get};&#10;mod vehicle;&#10;use vehicle::*;&#10;&#10;#[tokio::main]&#10;#[allow(dead_code)]&#10;async fn main() {&#10;    // build our application with a single route&#10;    let app = Router::new()&#10;        .route(&quot;/&quot;, get(hello))&#10;        .route(&quot;/vehicle&quot;, get(vehicle_get))&#10;        .route(&quot;/vehicle/query&quot;, get(vehicle_get_by_query))&#10;        .route(&quot;/vehicle&quot;, post(vehicle_post))&#10;        .route(&quot;/vehicle/delete/{id}&quot;, delete(vehicle_delete));&#10;&#10;    // run our app with hyper, listening globally on port 5000&#10;    let listener = tokio::net::TcpListener::bind(&quot;0.0.0.0:5000&quot;).await.unwrap();&#10;    let app_res= axum::serve(listener, app).await;&#10;    match app_res {&#10;        Ok(_) =&gt; println!(&quot;Server running on http://localhost:5000&quot;),&#10;        Err(e) =&gt; eprintln!(&quot;Server error: {}&quot;, e),&#10;    }&#10;}&#10;&#10;async fn hello() -&gt; &amp;'static str {&#10;    &quot;Hello, World from Axum With Rust! &quot;&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="use axum::{Router};&#10;use axum::routing::{delete, post, get};&#10;mod vehicle;&#10;use vehicle::*;&#10;&#10;#[tokio::main]&#10;#[allow(dead_code)]&#10;async fn main() {&#10;    // build our application with a single route&#10;    let app = Router::new()&#10;        .route(&quot;/&quot;, get(hello))&#10;        .route(&quot;/vehicle&quot;, get(vehicle_get))&#10;        .route(&quot;/vehicle/query&quot;, get(vehicle_get_by_query))&#10;        .route(&quot;/vehicle&quot;, post(vehicle_post))&#10;        .route(&quot;/vehicle/:id&quot;, delete(vehicle_delete));&#10;&#10;    // run our app with hyper, listening globally on port 5000&#10;    let listener = tokio::net::TcpListener::bind(&quot;0.0.0.0:5000&quot;).await.unwrap();&#10;    let app_res= axum::serve(listener, app).await;&#10;    match app_res {&#10;        Ok(_) =&gt; println!(&quot;Server running on http://localhost:5000&quot;),&#10;        Err(e) =&gt; eprintln!(&quot;Server error: {}&quot;, e),&#10;    }&#10;}&#10;&#10;async fn hello() -&gt; &amp;'static str {&#10;    &quot;Hello, World from Axum With Rust! &quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/vehicle.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/vehicle.rs" />
              <option name="originalContent" value="use axum::extract::Query;&#10;use axum::http::StatusCode;&#10;use axum::response::IntoResponse;&#10;use axum::Json;&#10;use serde::{Deserialize, Serialize};&#10;&#10;#[derive(Debug)]&#10;#[derive(Serialize, Deserialize)]&#10;pub struct Vehicle {&#10;    id: Option&lt;String&gt;,&#10;    manufacturer: String,&#10;    name: String,&#10;    model: String,&#10;    year: u32,&#10;}&#10;// get the vehicle details&#10;pub async fn vehicle_get() -&gt; impl IntoResponse {&#10;    let vehicle = Vehicle {&#10;        id: Some(uuid::Uuid::new_v4().to_string()),&#10;        manufacturer: &quot;BMW&quot;.to_string(),&#10;        name: &quot;BMW&quot;.to_string(),&#10;        model: &quot;CS&quot;.to_string(),&#10;        year: 2024,&#10;    };&#10;    (StatusCode::OK, Json(vehicle))&#10;}&#10;&#10;// get vehicle details by query parameter&#10;pub async fn vehicle_get_by_query(Query(mut v): Query&lt;Vehicle&gt;) -&gt; impl IntoResponse {&#10;    // If the ID is not set, assign a new UUID&#10;    if v.id.is_none() {&#10;        v.id = Some(uuid::Uuid::new_v4().to_string());&#10;    }&#10;    // Log the received vehicle query&#10;    println!(&quot;Received vehicle query: {:?}&quot;, v);&#10;    &#10;    // Here you would typically fetch the vehicle from a database or perform some action&#10;    // For now, we just return the vehicle as is&#10;    (StatusCode::OK, Json(v))&#10;}&#10;&#10;// post a new vehicle&#10;pub async fn vehicle_post(Json(mut v): Json&lt;Vehicle&gt;) -&gt; impl IntoResponse {&#10;    // Assign a new UUID to the vehicle if it doesn't have one&#10;    v.id = Some(uuid::Uuid::new_v4().to_string());&#10;    // Log the received vehicle&#10;    println!(&quot;Received vehicle: {:?}&quot;, v);&#10;    // Here you would typically save the vehicle to a database or perform some action&#10;    // For now, we just print it to the console&#10;    (StatusCode::CREATED, Json(v)) // Return 201 Created with the vehicle data&#10;}&#10;&#10;// delete a vehicle&#10;pub async fn vehicle_delete() -&gt; impl IntoResponse {&#10;    // This function would handle deletion logic, but for now, we return a placeholder response&#10;    (StatusCode::NO_CONTENT, &quot;Vehicle deleted successfully&quot;)&#10;}" />
              <option name="updatedContent" value="use axum::extract::{Query, Path};&#10;use axum::http::StatusCode;&#10;use axum::response::IntoResponse;&#10;use axum::Json;&#10;use serde::{Deserialize, Serialize};&#10;&#10;#[derive(Debug)]&#10;#[derive(Serialize, Deserialize)]&#10;pub struct Vehicle {&#10;    id: Option&lt;String&gt;,&#10;    manufacturer: String,&#10;    name: String,&#10;    model: String,&#10;    year: u32,&#10;}&#10;// get the vehicle details&#10;pub async fn vehicle_get() -&gt; impl IntoResponse {&#10;    let vehicle = Vehicle {&#10;        id: Some(uuid::Uuid::new_v4().to_string()),&#10;        manufacturer: &quot;BMW&quot;.to_string(),&#10;        name: &quot;BMW&quot;.to_string(),&#10;        model: &quot;CS&quot;.to_string(),&#10;        year: 2024,&#10;    };&#10;    (StatusCode::OK, Json(vehicle))&#10;}&#10;&#10;// get vehicle details by query parameter&#10;pub async fn vehicle_get_by_query(Query(mut v): Query&lt;Vehicle&gt;) -&gt; impl IntoResponse {&#10;    // If the ID is not set, assign a new UUID&#10;    if v.id.is_none() {&#10;        v.id = Some(uuid::Uuid::new_v4().to_string());&#10;    }&#10;    // Log the received vehicle query&#10;    println!(&quot;Received vehicle query: {:?}&quot;, v);&#10;    &#10;    // Here you would typically fetch the vehicle from a database or perform some action&#10;    // For now, we just return the vehicle as is&#10;    (StatusCode::OK, Json(v))&#10;}&#10;&#10;// post a new vehicle&#10;pub async fn vehicle_post(Json(mut v): Json&lt;Vehicle&gt;) -&gt; impl IntoResponse {&#10;    // Assign a new UUID to the vehicle if it doesn't have one&#10;    v.id = Some(uuid::Uuid::new_v4().to_string());&#10;    // Log the received vehicle&#10;    println!(&quot;Received vehicle: {:?}&quot;, v);&#10;    // Here you would typically save the vehicle to a database or perform some action&#10;    // For now, we just print it to the console&#10;    (StatusCode::CREATED, Json(v)) // Return 201 Created with the vehicle data&#10;}&#10;&#10;// delete a vehicle&#10;pub async fn vehicle_delete(Path(id): Path&lt;String&gt;) -&gt; impl IntoResponse {&#10;    // Log the received vehicle ID for deletion&#10;    println!(&quot;Deleting vehicle with ID: {}&quot;, id);&#10;    &#10;    // Here you would typically delete the vehicle from a database&#10;    // For now, we just return a success response&#10;    (StatusCode::NO_CONTENT, format!(&quot;Vehicle with ID {} deleted successfully&quot;, id))&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>